{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TaskManagerProject Purpose The objective of this project is to create a database to compare the Simplon training offer with other training courses available on the \"Compte Formation\" website. On the one hand, the Simplon site is scraped to recover the elements necessary for the comparison. On the other hand, an extraction of the elements available on the \"Compte Formation\" website makes it possible to constitute a common database to make comparisons. It includes: - Tables are created with SQLAlchemy - An API (FastAPI) without authentication (with token-based authentication g) - The database will be hosted on Azure. - (Scraping of the Simplon site must be automated and carried out weekly via Azure.) - (The API will be dockerized, and deployed on Azure ACI.) (The procedure for building a Postgres SQL database on Azure and procedure for importing data.) Dependencies: poetry pandas scrapy sqlalchemy fastapi uvicorn (- azure CLI - azure ml CLI - psql) Setup Create virtual environement and install requirements: poetry install Create .env file in path /TaskManagerProject/formationscraper/.env using this template IS_POSTGRES=0 # 0 or 1 : 0 = sqlite database / 1 = postgredatabase DATABASE_SQLITE=sqlite:////....../database.db # indiquer le chemin vers la bdd DB_USERNAME= DB_PASSWORD= DB_HOSTNAME= DB_PORT= DB_NAME= To create a sqlite database, execute this command : first, make sure the .env is adjusted for the sqlite database then : scrapy crawl formationspider (To create the Olist database, execute these commands: chmod +x ./database/azure_postgres/create_postgres.sh ./database/azure_postgres/create_postgres.sh chmod +x ./database/azure_postgres/create_tables.sh ./database/azure_postgres/create_tables.sh chmod +x ./database/azure_postgres/import_postgres.sh ./database/azure_postgres/import_postgres.sh ```) ## Launch the API ```bash uvicorn formation scraper.main:app --reload Get your token: (poetry run python -m api.utils) Update model_name in ./api/launch_app.sh and then you can execute it README.md 3 Ko","title":"Accueil"},{"location":"#taskmanagerproject","text":"","title":"TaskManagerProject"},{"location":"#purpose","text":"The objective of this project is to create a database to compare the Simplon training offer with other training courses available on the \"Compte Formation\" website. On the one hand, the Simplon site is scraped to recover the elements necessary for the comparison. On the other hand, an extraction of the elements available on the \"Compte Formation\" website makes it possible to constitute a common database to make comparisons. It includes: - Tables are created with SQLAlchemy - An API (FastAPI) without authentication (with token-based authentication g) - The database will be hosted on Azure. - (Scraping of the Simplon site must be automated and carried out weekly via Azure.) - (The API will be dockerized, and deployed on Azure ACI.) (The procedure for building a Postgres SQL database on Azure and procedure for importing data.)","title":"Purpose"},{"location":"#dependencies","text":"poetry pandas scrapy sqlalchemy fastapi uvicorn (- azure CLI - azure ml CLI - psql)","title":"Dependencies:"},{"location":"#setup","text":"Create virtual environement and install requirements: poetry install Create .env file in path /TaskManagerProject/formationscraper/.env using this template IS_POSTGRES=0 # 0 or 1 : 0 = sqlite database / 1 = postgredatabase DATABASE_SQLITE=sqlite:////....../database.db # indiquer le chemin vers la bdd DB_USERNAME= DB_PASSWORD= DB_HOSTNAME= DB_PORT= DB_NAME= To create a sqlite database, execute this command : first, make sure the .env is adjusted for the sqlite database then : scrapy crawl formationspider (To create the Olist database, execute these commands: chmod +x ./database/azure_postgres/create_postgres.sh ./database/azure_postgres/create_postgres.sh chmod +x ./database/azure_postgres/create_tables.sh ./database/azure_postgres/create_tables.sh chmod +x ./database/azure_postgres/import_postgres.sh ./database/azure_postgres/import_postgres.sh ```) ## Launch the API ```bash uvicorn formation scraper.main:app --reload Get your token: (poetry run python -m api.utils) Update model_name in ./api/launch_app.sh and then you can execute it README.md 3 Ko","title":"Setup"},{"location":"api/introduction/","text":"Documentation API Introduction This API aims to expose a machine learning model. It contains a single endpoint allowing a prediction to be made from the explanatory variables. It includes token-based authentication. Code Structure main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server. predict.py : Contains the logic for making predictions with the machine learning model. It likely defines FastAPI endpoints to receive prediction requests and return the results. opentelemetry_setup.py : Configures OpenTelemetry for monitoring and tracing the application. It helps in collecting metrics and traces for monitoring and debugging. utils.py : Contains utility functions used across the API application. This may include authentication logic, helpers for data processing, etc. database.py : contains the logic for connecting to and interacting with the database. It may include functions for creating database sessions, data models, and CRUD operations model_loader.py : contains the logic for loading the machine learning model from a file or external source. It's used to prepare the model for predictions. launch_app.sh : A shell script used to launch the API application. It checks if the machine learning model is loaded and, if not, runs a script to load it before starting the API with Uvicorn. Authentification You need a token to use the predict endpoint of the api. To get this token you need to call the generate_token(\"admin\") function in the api/utils.py file python3 -m api.utils Endpoints Prediction URL : /predict Method : POST Authentication required : Yes Request body : Model-specific data for prediction. Response : Prediction result.","title":"Introduction"},{"location":"api/introduction/#documentation-api","text":"","title":"Documentation API"},{"location":"api/introduction/#introduction","text":"This API aims to expose a machine learning model. It contains a single endpoint allowing a prediction to be made from the explanatory variables. It includes token-based authentication.","title":"Introduction"},{"location":"api/introduction/#code-structure","text":"main.py : The entry point of the API application. It initializes the FastAPI application, sets up routing, and may include logic for starting the server. predict.py : Contains the logic for making predictions with the machine learning model. It likely defines FastAPI endpoints to receive prediction requests and return the results. opentelemetry_setup.py : Configures OpenTelemetry for monitoring and tracing the application. It helps in collecting metrics and traces for monitoring and debugging. utils.py : Contains utility functions used across the API application. This may include authentication logic, helpers for data processing, etc. database.py : contains the logic for connecting to and interacting with the database. It may include functions for creating database sessions, data models, and CRUD operations model_loader.py : contains the logic for loading the machine learning model from a file or external source. It's used to prepare the model for predictions. launch_app.sh : A shell script used to launch the API application. It checks if the machine learning model is loaded and, if not, runs a script to load it before starting the API with Uvicorn.","title":"Code Structure"},{"location":"api/introduction/#authentification","text":"You need a token to use the predict endpoint of the api. To get this token you need to call the generate_token(\"admin\") function in the api/utils.py file python3 -m api.utils","title":"Authentification"},{"location":"api/introduction/#endpoints","text":"","title":"Endpoints"},{"location":"api/introduction/#prediction","text":"URL : /predict Method : POST Authentication required : Yes Request body : Model-specific data for prediction. Response : Prediction result.","title":"Prediction"},{"location":"scraping/introduction/","text":"Utilisation de mkdocs I Cr\u00e9er la documentation 1. Installer les librairies pythons mkdocs, mkdocstrings et mkdocstrings-python 2. Cr\u00e9er un fichier mkdocs.yml \u00e0 la racine du projet pour configurer la doc site_name: \"Nom de votre projet\" nav: # on d\u00e9finit l'architecture de la doc en faisant les liens vers les fichiers dans docs - Accueil: index.md - Documentation: - Introduction: introduction.md - API: - Module1: api/module1.md - Module2: api/module2.md theme: name: readthedocs #on peut utiliser d'autre theme de doc plugins: - search - mkdocstrings: #ce la permet d'int\u00e9grer directement les docstrings handlers: python: options: docstring_style: google rendering: show_source: true 3. Cr\u00e9er le dossier docs et ajouter toutes les docs 4. On peut inclure directement les docstings comme cela # Documentation du Module1 ::: src.module1 handler: python rendering: show_source: true 5. Pour ajouter des fichiers md en dehors du r\u00e9pertoire docs, il faut cr\u00e9er des liens symboliques dans docs: Cr\u00e9ation des liens symboliques : Supposons que vous ayez un fichier Markdown situ\u00e9 dans ../external_docs/intro.md que vous voulez inclure dans la documentation. Cr\u00e9ez un lien symbolique dans le r\u00e9pertoire docs : ln -s ../external_docs/intro.md docs/intro.md Cette commande cr\u00e9e un lien symbolique nomm\u00e9 intro.md dans le r\u00e9pertoire docs pointant vers ../external_docs/intro.md. II Publier la documentation sur github pages 1. En local cr\u00e9er la branche qui va accueillir la doc (le html et css g\u00e9n\u00e9r\u00e9s automatiquement notamment) bash git branch -M gh-pages git push -f origin gh-pages 2. Configurer GitHub Pages Acc\u00e9dez \u00e0 votre d\u00e9p\u00f4t sur GitHub. Allez dans \"Settings\". Dans la section \"Pages\", s\u00e9lectionnez la branche gh-pages comme source et roots Cliquez sur \"Save\". 3. Construisez votre doc et d\u00e9ployer votre code sur la branch: bash mkdocs build mkdocs gh-deploy --force","title":"Introduction"},{"location":"scraping/introduction/#utilisation-de-mkdocs","text":"","title":"Utilisation de mkdocs"},{"location":"scraping/introduction/#i-creer-la-documentation","text":"","title":"I Cr\u00e9er la documentation"},{"location":"scraping/introduction/#1-installer-les-librairies-pythons-mkdocs-mkdocstrings-et-mkdocstrings-python","text":"","title":"1. Installer les librairies pythons mkdocs, mkdocstrings et mkdocstrings-python"},{"location":"scraping/introduction/#2-creer-un-fichier-mkdocsyml-a-la-racine-du-projet-pour-configurer-la-doc","text":"site_name: \"Nom de votre projet\" nav: # on d\u00e9finit l'architecture de la doc en faisant les liens vers les fichiers dans docs - Accueil: index.md - Documentation: - Introduction: introduction.md - API: - Module1: api/module1.md - Module2: api/module2.md theme: name: readthedocs #on peut utiliser d'autre theme de doc plugins: - search - mkdocstrings: #ce la permet d'int\u00e9grer directement les docstrings handlers: python: options: docstring_style: google rendering: show_source: true","title":"2. Cr\u00e9er un fichier mkdocs.yml \u00e0 la racine du projet pour configurer la doc"},{"location":"scraping/introduction/#3-creer-le-dossier-docs-et-ajouter-toutes-les-docs","text":"","title":"3. Cr\u00e9er le dossier docs et ajouter toutes les docs"},{"location":"scraping/introduction/#4-on-peut-inclure-directement-les-docstings-comme-cela","text":"# Documentation du Module1 ::: src.module1 handler: python rendering: show_source: true","title":"4. On peut inclure directement les docstings comme cela"},{"location":"scraping/introduction/#5-pour-ajouter-des-fichiers-md-en-dehors-du-repertoire-docs-il-faut-creer-des-liens-symboliques-dans-docs","text":"","title":"5. Pour ajouter des fichiers md en dehors du r\u00e9pertoire docs, il faut cr\u00e9er des liens symboliques dans docs:"},{"location":"scraping/introduction/#creation-des-liens-symboliques","text":"Supposons que vous ayez un fichier Markdown situ\u00e9 dans ../external_docs/intro.md que vous voulez inclure dans la documentation. Cr\u00e9ez un lien symbolique dans le r\u00e9pertoire docs : ln -s ../external_docs/intro.md docs/intro.md Cette commande cr\u00e9e un lien symbolique nomm\u00e9 intro.md dans le r\u00e9pertoire docs pointant vers ../external_docs/intro.md.","title":"Cr\u00e9ation des liens symboliques :"},{"location":"scraping/introduction/#ii-publier-la-documentation-sur-github-pages","text":"","title":"II Publier la documentation sur github pages"},{"location":"scraping/introduction/#1-en-local-creer-la-branche-qui-va-accueillir-la-doc-le-html-et-css-generes-automatiquement-notamment","text":"bash git branch -M gh-pages git push -f origin gh-pages","title":"1. En local cr\u00e9er la branche qui va accueillir la doc (le html et css g\u00e9n\u00e9r\u00e9s automatiquement notamment)"},{"location":"scraping/introduction/#2-configurer-github-pages","text":"Acc\u00e9dez \u00e0 votre d\u00e9p\u00f4t sur GitHub. Allez dans \"Settings\". Dans la section \"Pages\", s\u00e9lectionnez la branche gh-pages comme source et roots Cliquez sur \"Save\".","title":"2. Configurer GitHub Pages"},{"location":"scraping/introduction/#3-construisez-votre-doc-et-deployer-votre-code-sur-la-branch","text":"bash mkdocs build mkdocs gh-deploy --force","title":"3. Construisez votre doc et d\u00e9ployer votre code sur la branch:"},{"location":"scraping/models/","text":"Certificateur Bases: Base Classe repr\u00e9sentant un certificateur. Attributes: siret ( str ) \u2013 Le num\u00e9ro SIRET du certificateur. legal_name ( str ) \u2013 Le nom l\u00e9gal du certificateur. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es au certificateur. Source code in formationscraper/formationscraper/models.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 class Certificateur ( Base ): \"\"\" Classe repr\u00e9sentant un certificateur. Attributes: siret (str): Le num\u00e9ro SIRET du certificateur. legal_name (str): Le nom l\u00e9gal du certificateur. certifications (list of Certification): Les certifications associ\u00e9es au certificateur. \"\"\" __tablename__ = 'certificateur' siret = Column ( String , primary_key = True ) legal_name = Column ( String ) certifications = relationship ( 'Certification' , secondary = certification_certificateur , back_populates = 'certificateurs' ) Certification Bases: Base Classe repr\u00e9sentant une certification. Attributes: id_certif ( str ) \u2013 L'identifiant unique de la certification. type_certif ( str ) \u2013 Le type de certification. certif_name ( str ) \u2013 Le nom de la certification. niveau ( int ) \u2013 Le niveau de la certification. etat ( int ) \u2013 L'\u00e9tat de la certification (actif, inactif, etc.). certificateurs ( list of Certificateur ) \u2013 Les certificateurs associ\u00e9s \u00e0 la certification. formations ( list of Formation ) \u2013 Les formations associ\u00e9es \u00e0 la certification. nsfs ( list of NSF ) \u2013 Les cat\u00e9gories NSF associ\u00e9es \u00e0 la certification. formas ( list of Forma ) \u2013 Les cat\u00e9gories Forma associ\u00e9es \u00e0 la certification. Source code in formationscraper/formationscraper/models.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 class Certification ( Base ): \"\"\" Classe repr\u00e9sentant une certification. Attributes: id_certif (str): L'identifiant unique de la certification. type_certif (str): Le type de certification. certif_name (str): Le nom de la certification. niveau (int): Le niveau de la certification. etat (int): L'\u00e9tat de la certification (actif, inactif, etc.). certificateurs (list of Certificateur): Les certificateurs associ\u00e9s \u00e0 la certification. formations (list of Formation): Les formations associ\u00e9es \u00e0 la certification. nsfs (list of NSF): Les cat\u00e9gories NSF associ\u00e9es \u00e0 la certification. formas (list of Forma): Les cat\u00e9gories Forma associ\u00e9es \u00e0 la certification. \"\"\" __tablename__ = 'certification' id_certif = Column ( String , primary_key = True ) type_certif = Column ( String , primary_key = True ) certif_name = Column ( String ) niveau = Column ( Integer ) etat = Column ( Integer ) certificateurs = relationship ( 'Certificateur' , secondary = certification_certificateur , back_populates = 'certifications' ) formations = relationship ( 'Formation' , secondary = formation_certification , back_populates = 'certifications' ) nsfs = relationship ( 'NSF' , secondary = certification_nsf , back_populates = 'certifications' ) formas = relationship ( 'Forma' , secondary = certification_forma , back_populates = 'certifications' ) Forma Bases: Base Classe repr\u00e9sentant une cat\u00e9gorie Forma. Attributes: forma_code ( int ) \u2013 Le code unique de la cat\u00e9gorie Forma. forma_name ( str ) \u2013 Le nom de la cat\u00e9gorie Forma. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie Forma. Source code in formationscraper/formationscraper/models.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 class Forma ( Base ): \"\"\" Classe repr\u00e9sentant une cat\u00e9gorie Forma. Attributes: forma_code (int): Le code unique de la cat\u00e9gorie Forma. forma_name (str): Le nom de la cat\u00e9gorie Forma. certifications (list of Certification): Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie Forma. \"\"\" __tablename__ = 'forma' forma_code = Column ( Integer , primary_key = True ) forma_name = Column ( String ) certifications = relationship ( 'Certification' , secondary = certification_forma , back_populates = 'formas' ) Formation Bases: Base Classe repr\u00e9sentant une formation. Attributes: id_formation ( int ) \u2013 L'identifiant unique de la formation. titre_formation ( str ) \u2013 Le titre de la formation. filiere ( str ) \u2013 La fili\u00e8re de la formation. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es \u00e0 la formation. sessions ( list of Session ) \u2013 Les sessions associ\u00e9es \u00e0 la formation. Source code in formationscraper/formationscraper/models.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 class Formation ( Base ): \"\"\" Classe repr\u00e9sentant une formation. Attributes: id_formation (int): L'identifiant unique de la formation. titre_formation (str): Le titre de la formation. filiere (str): La fili\u00e8re de la formation. certifications (list of Certification): Les certifications associ\u00e9es \u00e0 la formation. sessions (list of Session): Les sessions associ\u00e9es \u00e0 la formation. \"\"\" __tablename__ = 'formation' id_formation = Column ( Integer , primary_key = True ) titre_formation = Column ( String ) filiere = Column ( String ) certifications = relationship ( 'Certification' , secondary = formation_certification , back_populates = 'formations' ) sessions = relationship ( \"Session\" , back_populates = \"formation\" ) NSF Bases: Base Classe repr\u00e9sentant une cat\u00e9gorie NSF (Nomenclature des Sp\u00e9cialit\u00e9s de Formation). Attributes: nsf_code ( str ) \u2013 Le code unique de la cat\u00e9gorie NSF. nsf_name ( str ) \u2013 Le nom de la cat\u00e9gorie NSF. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie NSF. Source code in formationscraper/formationscraper/models.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 class NSF ( Base ): \"\"\" Classe repr\u00e9sentant une cat\u00e9gorie NSF (Nomenclature des Sp\u00e9cialit\u00e9s de Formation). Attributes: nsf_code (str): Le code unique de la cat\u00e9gorie NSF. nsf_name (str): Le nom de la cat\u00e9gorie NSF. certifications (list of Certification): Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie NSF. \"\"\" __tablename__ = 'nsf' nsf_code = Column ( String , primary_key = True ) nsf_name = Column ( String ) certifications = relationship ( 'Certification' , secondary = certification_nsf , back_populates = 'nsfs' ) Session Bases: Base Classe repr\u00e9sentant une session de formation. Attributes: id_session ( int ) \u2013 L'identifiant unique de la session. id_formation ( int ) \u2013 L'identifiant de la formation associ\u00e9e. location ( str ) \u2013 Le lieu de la session. duree ( int ) \u2013 La dur\u00e9e de la session en jours. date_debut ( str / date ) \u2013 La date de d\u00e9but de la session (String pour SQLite, Date pour PostgreSQL). formation ( Formation ) \u2013 La formation associ\u00e9e \u00e0 cette session. Source code in formationscraper/formationscraper/models.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class Session ( Base ): \"\"\" Classe repr\u00e9sentant une session de formation. Attributes: id_session (int): L'identifiant unique de la session. id_formation (int): L'identifiant de la formation associ\u00e9e. location (str): Le lieu de la session. duree (int): La dur\u00e9e de la session en jours. date_debut (str/date): La date de d\u00e9but de la session (String pour SQLite, Date pour PostgreSQL). formation (Formation): La formation associ\u00e9e \u00e0 cette session. \"\"\" __tablename__ = 'session' id_session = Column ( Integer , primary_key = True ) id_formation = Column ( Integer , ForeignKey ( 'formation.id_formation' )) location = Column ( String ) duree = Column ( Integer ) date_debut = Column ( date_type ) formation = relationship ( \"Formation\" , back_populates = \"sessions\" )","title":"Models"},{"location":"scraping/models/#formationscraper.formationscraper.models.Certificateur","text":"Bases: Base Classe repr\u00e9sentant un certificateur. Attributes: siret ( str ) \u2013 Le num\u00e9ro SIRET du certificateur. legal_name ( str ) \u2013 Le nom l\u00e9gal du certificateur. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es au certificateur. Source code in formationscraper/formationscraper/models.py 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 class Certificateur ( Base ): \"\"\" Classe repr\u00e9sentant un certificateur. Attributes: siret (str): Le num\u00e9ro SIRET du certificateur. legal_name (str): Le nom l\u00e9gal du certificateur. certifications (list of Certification): Les certifications associ\u00e9es au certificateur. \"\"\" __tablename__ = 'certificateur' siret = Column ( String , primary_key = True ) legal_name = Column ( String ) certifications = relationship ( 'Certification' , secondary = certification_certificateur , back_populates = 'certificateurs' )","title":"Certificateur"},{"location":"scraping/models/#formationscraper.formationscraper.models.Certification","text":"Bases: Base Classe repr\u00e9sentant une certification. Attributes: id_certif ( str ) \u2013 L'identifiant unique de la certification. type_certif ( str ) \u2013 Le type de certification. certif_name ( str ) \u2013 Le nom de la certification. niveau ( int ) \u2013 Le niveau de la certification. etat ( int ) \u2013 L'\u00e9tat de la certification (actif, inactif, etc.). certificateurs ( list of Certificateur ) \u2013 Les certificateurs associ\u00e9s \u00e0 la certification. formations ( list of Formation ) \u2013 Les formations associ\u00e9es \u00e0 la certification. nsfs ( list of NSF ) \u2013 Les cat\u00e9gories NSF associ\u00e9es \u00e0 la certification. formas ( list of Forma ) \u2013 Les cat\u00e9gories Forma associ\u00e9es \u00e0 la certification. Source code in formationscraper/formationscraper/models.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 class Certification ( Base ): \"\"\" Classe repr\u00e9sentant une certification. Attributes: id_certif (str): L'identifiant unique de la certification. type_certif (str): Le type de certification. certif_name (str): Le nom de la certification. niveau (int): Le niveau de la certification. etat (int): L'\u00e9tat de la certification (actif, inactif, etc.). certificateurs (list of Certificateur): Les certificateurs associ\u00e9s \u00e0 la certification. formations (list of Formation): Les formations associ\u00e9es \u00e0 la certification. nsfs (list of NSF): Les cat\u00e9gories NSF associ\u00e9es \u00e0 la certification. formas (list of Forma): Les cat\u00e9gories Forma associ\u00e9es \u00e0 la certification. \"\"\" __tablename__ = 'certification' id_certif = Column ( String , primary_key = True ) type_certif = Column ( String , primary_key = True ) certif_name = Column ( String ) niveau = Column ( Integer ) etat = Column ( Integer ) certificateurs = relationship ( 'Certificateur' , secondary = certification_certificateur , back_populates = 'certifications' ) formations = relationship ( 'Formation' , secondary = formation_certification , back_populates = 'certifications' ) nsfs = relationship ( 'NSF' , secondary = certification_nsf , back_populates = 'certifications' ) formas = relationship ( 'Forma' , secondary = certification_forma , back_populates = 'certifications' )","title":"Certification"},{"location":"scraping/models/#formationscraper.formationscraper.models.Forma","text":"Bases: Base Classe repr\u00e9sentant une cat\u00e9gorie Forma. Attributes: forma_code ( int ) \u2013 Le code unique de la cat\u00e9gorie Forma. forma_name ( str ) \u2013 Le nom de la cat\u00e9gorie Forma. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie Forma. Source code in formationscraper/formationscraper/models.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 class Forma ( Base ): \"\"\" Classe repr\u00e9sentant une cat\u00e9gorie Forma. Attributes: forma_code (int): Le code unique de la cat\u00e9gorie Forma. forma_name (str): Le nom de la cat\u00e9gorie Forma. certifications (list of Certification): Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie Forma. \"\"\" __tablename__ = 'forma' forma_code = Column ( Integer , primary_key = True ) forma_name = Column ( String ) certifications = relationship ( 'Certification' , secondary = certification_forma , back_populates = 'formas' )","title":"Forma"},{"location":"scraping/models/#formationscraper.formationscraper.models.Formation","text":"Bases: Base Classe repr\u00e9sentant une formation. Attributes: id_formation ( int ) \u2013 L'identifiant unique de la formation. titre_formation ( str ) \u2013 Le titre de la formation. filiere ( str ) \u2013 La fili\u00e8re de la formation. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es \u00e0 la formation. sessions ( list of Session ) \u2013 Les sessions associ\u00e9es \u00e0 la formation. Source code in formationscraper/formationscraper/models.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 class Formation ( Base ): \"\"\" Classe repr\u00e9sentant une formation. Attributes: id_formation (int): L'identifiant unique de la formation. titre_formation (str): Le titre de la formation. filiere (str): La fili\u00e8re de la formation. certifications (list of Certification): Les certifications associ\u00e9es \u00e0 la formation. sessions (list of Session): Les sessions associ\u00e9es \u00e0 la formation. \"\"\" __tablename__ = 'formation' id_formation = Column ( Integer , primary_key = True ) titre_formation = Column ( String ) filiere = Column ( String ) certifications = relationship ( 'Certification' , secondary = formation_certification , back_populates = 'formations' ) sessions = relationship ( \"Session\" , back_populates = \"formation\" )","title":"Formation"},{"location":"scraping/models/#formationscraper.formationscraper.models.NSF","text":"Bases: Base Classe repr\u00e9sentant une cat\u00e9gorie NSF (Nomenclature des Sp\u00e9cialit\u00e9s de Formation). Attributes: nsf_code ( str ) \u2013 Le code unique de la cat\u00e9gorie NSF. nsf_name ( str ) \u2013 Le nom de la cat\u00e9gorie NSF. certifications ( list of Certification ) \u2013 Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie NSF. Source code in formationscraper/formationscraper/models.py 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 class NSF ( Base ): \"\"\" Classe repr\u00e9sentant une cat\u00e9gorie NSF (Nomenclature des Sp\u00e9cialit\u00e9s de Formation). Attributes: nsf_code (str): Le code unique de la cat\u00e9gorie NSF. nsf_name (str): Le nom de la cat\u00e9gorie NSF. certifications (list of Certification): Les certifications associ\u00e9es \u00e0 la cat\u00e9gorie NSF. \"\"\" __tablename__ = 'nsf' nsf_code = Column ( String , primary_key = True ) nsf_name = Column ( String ) certifications = relationship ( 'Certification' , secondary = certification_nsf , back_populates = 'nsfs' )","title":"NSF"},{"location":"scraping/models/#formationscraper.formationscraper.models.Session","text":"Bases: Base Classe repr\u00e9sentant une session de formation. Attributes: id_session ( int ) \u2013 L'identifiant unique de la session. id_formation ( int ) \u2013 L'identifiant de la formation associ\u00e9e. location ( str ) \u2013 Le lieu de la session. duree ( int ) \u2013 La dur\u00e9e de la session en jours. date_debut ( str / date ) \u2013 La date de d\u00e9but de la session (String pour SQLite, Date pour PostgreSQL). formation ( Formation ) \u2013 La formation associ\u00e9e \u00e0 cette session. Source code in formationscraper/formationscraper/models.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class Session ( Base ): \"\"\" Classe repr\u00e9sentant une session de formation. Attributes: id_session (int): L'identifiant unique de la session. id_formation (int): L'identifiant de la formation associ\u00e9e. location (str): Le lieu de la session. duree (int): La dur\u00e9e de la session en jours. date_debut (str/date): La date de d\u00e9but de la session (String pour SQLite, Date pour PostgreSQL). formation (Formation): La formation associ\u00e9e \u00e0 cette session. \"\"\" __tablename__ = 'session' id_session = Column ( Integer , primary_key = True ) id_formation = Column ( Integer , ForeignKey ( 'formation.id_formation' )) location = Column ( String ) duree = Column ( Integer ) date_debut = Column ( date_type ) formation = relationship ( \"Formation\" , back_populates = \"sessions\" )","title":"Session"}]}